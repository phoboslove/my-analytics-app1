# ==============================================================================
#           –§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï v4.0 (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
# ==============================================================================

# --- 1. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ---
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import warnings
# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from mlxtend.frequent_patterns import apriori, association_rules
    from adjustText import adjust_text
except ImportError:
    st.error("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (mlxtend, adjustText) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª requirements.txt.")
    st.stop()

import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader


# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ò –°–¢–ò–õ–ï–ô ---
st.set_page_config(page_title="–ë–∏–∑–Ω–µ—Å-–ê–Ω–∞–ª–∏—Ç–∏–∫", page_icon="üìà", layout="wide")
warnings.filterwarnings('ignore') # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã

# –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit
hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


# --- 3. –ë–õ–û–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
try:
    with open('config.yaml') as file:
        config = yaml.load(file, Loader=SafeLoader)
except FileNotFoundError:
    st.error("–û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'config.yaml' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub –≤–º–µ—Å—Ç–µ —Å app.py.")
    st.stop()


authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
    config['preauthorized']
)

st.title("üë®‚Äçüíª AI –ë–∏–∑–Ω–µ—Å-–ê–Ω–∞–ª–∏—Ç–∏–∫")

name, authentication_status, username = authenticator.login('main')


# --- 4. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ü–û–°–õ–ï –í–•–û–î–ê ---
if authentication_status:
    
    with st.sidebar:
        st.write(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{name}*!')
        authenticator.logout('–í—ã–π—Ç–∏', 'main')

    st.header("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏...", type=['csv', 'xlsx'], label_visibility="collapsed")

    if uploaded_file is not None:
        with st.spinner('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...'):
            try:
                # --- –ß–¢–ï–ù–ò–ï –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ---
                if uploaded_file.name.endswith('.csv'):
                    df = pd.read_csv(uploaded_file)
                else:
                    df = pd.read_excel(uploaded_file, engine='openpyxl')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                required_columns = ['OrderID', 'OrderDate', 'Dish', 'Price']
                if not all(col in df.columns for col in required_columns):
                    st.error(f"–û—à–∏–±–∫–∞: –í –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å: {', '.join(required_columns)}")
                    st.stop()
                    
                df['OrderDate'] = pd.to_datetime(df['OrderDate'])
                st.success(f"‚úîÔ∏è –§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫.")
                st.dataframe(df.head())

                # --- –û–°–ù–û–í–ù–´–ï KPI ---
                st.header("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–∏–∑–Ω–µ—Å–∞ üìä")
                total_revenue = df['Price'].sum()
                number_of_orders = df['OrderID'].nunique()
                average_check = total_revenue / number_of_orders if number_of_orders > 0 else 0
                
                kpi_cols = st.columns(3)
                kpi_cols[0].metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} —Ç–≥".replace(',', ' '))
                kpi_cols[1].metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", f"{number_of_orders}")
                kpi_cols[2].metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{average_check:,.0f} —Ç–≥".replace(',', ' '))
                
                # --- –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ò ---
                st.header("–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ üïí")
                daily_sales = df.groupby(df['OrderDate'].dt.date)['Price'].sum()
                st.write("–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º:")
                st.line_chart(daily_sales)

                # --- –ú–ï–ù–Æ-–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì ---
                st.header("–ú–∞—Ç—Ä–∏—Ü–∞ –ú–µ–Ω—é-–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞ üçΩÔ∏è")
                menu_analysis = df.groupby('Dish').agg(Popularity=('Dish', 'count'), Revenue=('Price', 'sum'))
                avg_popularity = menu_analysis['Popularity'].mean()
                avg_revenue = menu_analysis['Revenue'].mean()
                
                fig, ax = plt.subplots(figsize=(14, 10))
                ax.scatter(menu_analysis['Popularity'], menu_analysis['Revenue'], s=120, color='royalblue', alpha=0.6)
                texts = [ax.text(row['Popularity'], row['Revenue'], index, fontsize=10) for index, row in menu_analysis.iterrows()]
                adjust_text(texts, ax=ax, arrowprops=dict(arrowstyle='->', color='black', lw=0.5))
                ax.axvline(x=avg_popularity, color='r', linestyle='--')
                ax.axhline(y=avg_revenue, color='r', linestyle='--')
                ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –ú–µ–Ω—é-–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞', fontsize=16)
                ax.set_xlabel('–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂)')
                ax.set_ylabel('–í—ã—Ä—É—á–∫–∞ (—Ç–µ–Ω–≥–µ)')
                ax.grid(True)
                st.pyplot(fig)

                # --- –ê–ù–ê–õ–ò–ó "–ò–î–ï–ê–õ–¨–ù–´–• –ü–ê–†" ---
                st.header("–ê–Ω–∞–ª–∏–∑ '–ò–¥–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä' üß∫")
                basket = (df.groupby(['OrderID', 'Dish'])['OrderID'].count().unstack().reset_index().fillna(0).set_index('OrderID'))
                def encode_units(x): return 1 if x >= 1 else 0
                basket_sets = basket.applymap(encode_units)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –±–æ–ª–µ–µ —á–µ–º 1 —Ç–æ–≤–∞—Ä–æ–º
                if basket_sets.shape[1] > 0 and not basket_sets.sum(axis=1).max() < 2:
                    frequent_itemsets = apriori(basket_sets, min_support=0.01, use_colnames=True) # –ü–æ–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    if not frequent_itemsets.empty:
                        rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1)
                        if not rules.empty:
                            st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ '–ï—Å–ª–∏... —Ç–æ...':")
                            st.dataframe(rules.sort_values(by=['lift', 'confidence'], ascending=False)[['antecedents', 'consequents', 'support', 'confidence', 'lift']].head(10))
                        else:
                            st.info("–°–∏–ª—å–Ω—ã—Ö '—Å–≤—è–∑–æ–∫' –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
                    else:
                        st.info("–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    st.info("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–µ–∫–æ–≤ —Å –¥–≤—É–º—è –∏ –±–æ–ª–µ–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π.")

            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏. –û—à–∏–±–∫–∞: {e}")

elif authentication_status == False:
    st.error('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã')
elif authentication_status == None:
    st.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.')
elif authentication_status == None:
    st.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.')
