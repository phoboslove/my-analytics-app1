# ==============================================================================
# –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î "–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –î–í–ò–ñ–ö–ê" v2.2 (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò –ü–û–õ–ù–´–ô)
# ==============================================================================
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from mlxtend.frequent_patterns import apriori, association_rules
from adjustText import adjust_text
import warnings

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
warnings.filterwarnings('ignore')


# --- –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
st.set_page_config(page_title="AI –ë–∏–∑–Ω–µ—Å-–ê–Ω–∞–ª–∏—Ç–∏–∫", page_icon="üìà", layout="wide")

st.title("üë®‚Äçüíª –í–∞—à Aetheris –ë–∏–∑–Ω–µ—Å-–ê–Ω–∞–ª–∏—Ç–∏–∫")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –∏–ª–∏ CSV, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏...", type=['csv', 'xlsx'])

# --- –ê–ù–ê–õ–ò–ó –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê ---
if uploaded_file is not None:
    
    with st.spinner('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...'):
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file, engine='openpyxl')
            
            df['OrderDate'] = pd.to_datetime(df['OrderDate'])
            st.success(f"‚úîÔ∏è –§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫.")

            # --- –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –ë–õ–û–ö–ê ---

            # --- –û–ë–©–ò–ï KPI ---
            st.header("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–∏–∑–Ω–µ—Å–∞ üìä")
            total_revenue = df['Price'].sum()
            number_of_orders = df['OrderID'].nunique()
            unique_customers = df['ClientID'].nunique() if 'ClientID' in df.columns else '–Ω/–¥'
            average_check = total_revenue / number_of_orders if number_of_orders > 0 else 0
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} —Ç–≥".replace(',', ' '))
            col2.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", f"{number_of_orders}")
            col3.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{average_check:,.0f} —Ç–≥".replace(',', ' '))
            col4.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", f"{unique_customers}")

            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–û–í ---
            if 'ClientID' in df.columns:
                st.header("–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º üèÜ")
                customer_spending = df.groupby('ClientID')['Price'].sum().sort_values(ascending=False)
                
                st.write("–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ —Ç—Ä–∞—Ç:")
                st.dataframe(customer_spending.head(10))
                
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
                plt.figure(figsize=(12, 6))
                customer_spending.head(10).plot(kind='bar', color='skyblue')
                plt.title('–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ —Ç—Ä–∞—Ç')
                plt.ylabel('–°—É–º–º–∞ —Ç—Ä–∞—Ç (—Ç–µ–Ω–≥–µ)')
                plt.xlabel('ID –ö–ª–∏–µ–Ω—Ç–∞')
                plt.xticks(rotation=45)
                st.pyplot()


            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ò ---
            st.header("–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ üïí")
            daily_sales = df.groupby(df['OrderDate'].dt.date)['Price'].sum()
            
            st.write("–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º:")
            st.line_chart(daily_sales) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ Streamlit, –æ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π!
            
            
            # --- –ú–ï–ù–Æ-–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì ---
            st.header("–ú–∞—Ç—Ä–∏—Ü–∞ –ú–µ–Ω—é-–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞ üçΩÔ∏è")
            menu_analysis = df.groupby('Dish').agg(Popularity=('Dish', 'count'), Revenue=('Price', 'sum'))
            avg_popularity = menu_analysis['Popularity'].mean()
            avg_revenue = menu_analysis['Revenue'].mean()
            
            fig, ax = plt.subplots(figsize=(14, 10))
            ax.scatter(menu_analysis['Popularity'], menu_analysis['Revenue'], s=120, color='grey', alpha=0.6)
            texts = [ax.text(row['Popularity'], row['Revenue'], index, fontsize=10) for index, row in menu_analysis.iterrows()]
            adjust_text(texts, ax=ax, arrowprops=dict(arrowstyle='->', color='black', lw=0.5))
            ax.axvline(x=avg_popularity, color='r', linestyle='--')
            ax.axhline(y=avg_revenue, color='r', linestyle='--')
            ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –ú–µ–Ω—é-–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞', fontsize=16)
            ax.set_xlabel('–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂)')
            ax.set_ylabel('–í—ã—Ä—É—á–∫–∞ (—Ç–µ–Ω–≥–µ)')
            ax.grid(True)
            st.pyplot(fig)


            # --- –ê–ù–ê–õ–ò–ó "–ò–î–ï–ê–õ–¨–ù–´–• –ü–ê–†" ---
            st.header("–ê–Ω–∞–ª–∏–∑ '–ò–¥–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä' üß∫")
            basket = (df.groupby(['OrderID', 'Dish'])['Price'].count().unstack().reset_index().fillna(0).set_index('OrderID'))
            def encode_units(x): return 1 if x > 0 else 0
            basket_sets = basket.apply(lambda x: x.map(encode_units))
            
            frequent_itemsets = apriori(basket_sets, min_support=0.05, use_colnames=True)
            if not frequent_itemsets.empty:
                rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1)
                if not rules.empty:
                    st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ '–ï—Å–ª–∏... —Ç–æ...':")
                    st.dataframe(rules.sort_values(by=['lift', 'confidence'], ascending=False)[['antecedents', 'consequents', 'support', 'confidence', 'lift']])
                else:
                    st.info("–°–∏–ª—å–Ω—ã—Ö '—Å–≤—è–∑–æ–∫' –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            else:
                st.info("–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (OrderID, OrderDate, Dish, Price). –û—à–∏–±–∫–∞: {e}")
            # v2
